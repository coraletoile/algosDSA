//Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

 

// Example 1:

//nums = [1,2,3,1]
// Output: true
// Example 2:

//nums = [1,2,3,4]
// Output: false
// Example 3:

// nums = [1,1,1,3,3,4,3,2,4,2]
// Output: true

/* <------------------------- contains duplicate ----------------------> */
function containsDuplicate (array) {
  // check length of set
  // check length of array
  // if set is less than or equal to array return false
  //if not return true

  const newArr = [...new Set(array)]
  console.log(newArr)

  if(newArr.length < array.length) {
    return true
  }
  return false
}

//console.log(containsDuplicate(nums))



/* <------------------------- valid Anagram ----------------------> */

// Given two strings s and t, return true if t is an anagram of s, and false otherwise.

// An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

 

// Example 1:

 //s = "anagram", t = "nagaram"
// Output: true
// Example 2:

//s = "rat", t = "car"
// Output: false
 

// Constraints:

// 1 <= s.length, t.length <= 5 * 104
// s and t consist of lowercase English letters.
 

// Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?


// could recurse
// loop
//check if current index of t is included in s
// if included, delete that element of s
// if not included, return false

// sort s and t
  // change to array and split
// if first index of both are same, recurse and pass slice

function validAnagram (s, t) {

const sortedS = s.split('').sort()
const sortedT = t.split('').sort()

function recurse (a, b) {

  if(b[0] === undefined){
    return true
  }

  if(a[0] === b[0]){
    a = a.slice(1,-1)
    b = b.slice(1,-1)
    return recurse(a, b)
   
  }
  else if(a[0] !== b[0]) {
    return false
  }



}
return recurse(sortedS, sortedT)

//return sortedT

}

function validAnagram2 (s, t) {
  const sortedS = s.split('').sort().join("")
  const sortedT = t.split('').sort().join("")

  return sortedS == sortedT

}


//console.log(validAnagram2(s, t))